#-----------------------------------------------------------------------
# ddu settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''

"-----------------------------------------------------------------------
" ddu filer settings
"-----------------------------------------------------------------------
" DDU開始前のウィンドウIDを保存する変数
let g:ddu_prev_winid = 0

" DDU開始前に現在のウィンドウIDを保存する関数
function! s:save_prev_winid() abort
  let g:ddu_prev_winid = win_getid()
endfunction

" 前のウィンドウでファイルを開く関数
function! s:open_in_prev_window() abort
  let item = ddu#ui#get_item()
  if !empty(item) && has_key(item, 'action') && has_key(item.action, 'path')
    if !item->get('isTree', v:false)
      " ファイルの場合
      call ddu#ui#do_action('quit')
      if g:ddu_prev_winid != 0 && win_gotoid(g:ddu_prev_winid)
        execute 'edit ' . fnameescape(item.action.path)
      endif
    else
      " ディレクトリの場合は通常のnarrowアクション
      call ddu#ui#do_action('itemAction', #{name: 'narrow'})
    endif
  endif
endfunction

nmap <silent> ,m <Cmd>call <SID>save_prev_winid()<CR><Cmd>call ddu#start({ 'name' : 'file' })<CR>

" fuzzy find full text search
nmap <silent> ,g <Cmd>call ddu#start({
\   'name': 'text',
\   'sources': [{
\     'name': 'rg',
\     'options': {
\       'matchers': [],
\       'volatile': v:true,
\      },
\   }],
\   'uiParams': {'ff': {
\     'ignoreEmpty': v:false,
\     'autoResize': v:false,
\   }},
\ })<CR>


" fuzzy find buffer
nmap <silent> ,b <Cmd>call ddu#start({ 'name' : 'buffer' })<CR>

" fuzzy find grep cursor word
nmap <silent> ,w <Cmd>call ddu#start({
\   'name': 'word',
\   'sources':[
\     {'name': 'rg', 'params': { 'input': expand('<cword>')}}
\   ],
\ })<CR>

" filer用のプレビューコマンド定義
let g:filer_preview_command = "
\ if [[ -f {} ]]; then
\   (bat --style=numbers --color=always {} || cat {}) 2>/dev/null | head -200;
\ elif [[ -d {} ]]; then
\   ls -la {};
\ else
\   echo {} is not a file or directory;
\ fi"


" 画面サイズの計算を行う関数
function! s:calculate_window_size() abort
  let l:lines = &lines
  let l:columns = &columns
  let l:win_height = float2nr(l:lines * 0.8)
  let l:win_width = float2nr(l:columns * 0.8)
  let l:win_row = (l:lines - l:win_height) / 2
  let l:win_col = (l:columns - l:win_width) / 2
  let l:preview_width = float2nr(l:win_width * 0.5)

  return {
    \ 'winHeight': l:win_height,
    \ 'winWidth': l:win_width,
    \ 'winRow': l:win_row,
    \ 'winCol': l:win_col,
    \ 'previewHeight': l:win_height,
    \ 'previewWidth': l:preview_width,
  \ }
endfunction

let s:win_size = s:calculate_window_size()

" ddu Global Setting
call ddu#custom#patch_global({
\   'ui': 'ff',
\   'actionOptions': {
\     'open': {
\       'quit': v:false,
\     },
\   },
\   'sourceOptions': {
\     '_': {
\       'matchers': ['matcher_substring'],
\     },
\     'file': {
\       'columns': ['icon_filename'],
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'prompt': '> ',
\       'split': 'floating',
\       'preview': v:true,
\       'previewFloating': v:true,
\       'floatingBorder': 'rounded',
\       'filterSplitDirection': 'floating',
\       'previewSplit': 'vertical',
\       'autoAction': { 'name': 'preview' },
\     },
\     'filer': {
\       'split': 'floating',
\       'sortTreesFirst': v:true,
\       'sort': 'filename',
\       'preview': v:true,
\       'floatingBorder': 'rounded',
\       'winHeight': s:win_size.winHeight,
\       'winWidth': s:win_size.winWidth,
\       'winRow': s:win_size.winRow,
\       'winCol': s:win_size.winCol,
\       'previewSplit': 'vertical',
\       'filterSplitDirection': 'floating',
\       'previewFloating': v:true,
\       'previewHeight': s:win_size.previewHeight,
\       'previewWidth': s:win_size.previewWidth,
\       'previewFloatingBorder': 'rounded',
\       'previewWindowOptions': [
\          ['&signcolumn', 'no'],
\          ['&number', 0],
\          ['&foldcolumn', 0],
\          ['&wrap', 0],
\       ],
\       'autoAction': { 'name': 'preview' },
\     }
\  },
\ })

"-----------------------------------------------------------------------
" ddu filer settings
"-----------------------------------------------------------------------
call ddu#custom#patch_local('file', {
\   'ui': 'filer',
\   'sources': [{'name': 'file', 'params': {}}]
\ })

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  " winfixbufを無効化
  setlocal nowinfixbuf
  " Change action, Is cursor item drectory or not.
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call <SID>open_in_prev_window()<CR>
  nnoremap <buffer><silent><expr> h
        \ ddu#ui#get_item()->get('isTree', v:false) ?
        \ "<Cmd>call ddu#ui#do_action('collapseItem')<CR>" :
        \ "<Cmd>call ddu#ui#do_action('preview')<CR>"
  " Move to higher path
  nnoremap <buffer><silent> ..
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'narrow', 'params': {'path': '..'}})<CR>
  nnoremap <buffer><silent> c
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'copy'})<CR>
  nnoremap <buffer><silent> d
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'delete'})<CR>
  nnoremap <buffer><silent> mv
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'move'})<CR>
  nnoremap <buffer><silent> r
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'rename'})<CR>
  nnoremap <buffer><silent> t
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'newFile'})<CR>
  nnoremap <buffer><silent> mk
        \ <Cmd>call ddu#ui#sync_action('itemAction', {'name': 'newDirectory'})<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#sync_action('toggleSelectItem')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#sync_action('expandItem', {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#sync_action('quit')<CR>
  " プレビューのトグル
  nnoremap <buffer><silent> p
        \ <Cmd>call ddu#ui#do_action('preview')<CR>
endfunction
"-----------------------------------------------------------------------
" end ddu filer settings
"-----------------------------------------------------------------------

" fuzzy find full text search setting
call ddu#custom#patch_local('text', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never', '--sort-files', '--hidden'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" fuzzy find buffer
call ddu#custom#patch_local('buffer', {
\   'sources': [{'name': 'buffer', 'params': {}}],
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" fuzzy find grep cursor word setting
call ddu#custom#patch_local('word', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" from ddu document
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#do_action('quit')<CR>
endfunction

" from ddu document
autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction
'''

# filer
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'

# filer
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'

# icon
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'

# filer
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

#-----------------------------------------------------------------------
# end of ddu settings
#-----------------------------------------------------------------------
