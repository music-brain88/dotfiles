#-----------------------------------------------------------------------
# ddc settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim', 'pum.vim', 'ddc-ui-native', 'copilot.vim', 'neosnippet.vim']
hook_add = '''
" Copilot
" <A-[>: previous completion.
inoremap <A-[> <Plug>(copilot-previous)
inoremap <A-]> <Plug>(copilot-next)
'''
hook_source = '''
  let g:copilot_no_maps = v:true
  call ddc#custom#patch_global('ui', 'native')
  call ddc#custom#patch_global('sources', ['lsp' ,'around', 'file', 'copilot', 'neosnippet', 'cmdline', 'cmdline-history'])
  call ddc#custom#patch_global('sourceOptions', #{
        \   _:#{
        \   matchers: ['matcher_fuzzy'],
        \   sorters: ['sorter_fuzzy'],
        \ },
        \   copilot: #{
        \     mark: ' Copilot',
        \     matchers: [],
        \     minAutoCompleteLength: 0,
        \     isVolatile: v:true,
        \   },
        \   around:#{
        \   mark: ' Text',
        \  },
        \   nvim-lsp:#{
        \   mark: ' LSP',
        \   dup: 'keep',
        \   keywordPattern: '\k+',
        \   forceCompletionPattern: '\\.\\w*|::\\w*|->\\w*',
        \  },
        \   file: #{
        \   mark: ' File',
        \   isVolatile: v:true,
        \   forceCompletionPattern: '\S/\S*',
        \  },
        \   neosnippet: #{
        \   mark: ' Snippet',
        \   dup: v:true,
        \   },
        \   cmdline: #{
        \   mark: ' Cmdline',
        \   },
        \   cmdline_history: #{
        \   mark: ' Cmdline History',
        \  },
        \ })

" Customize settings for specific filetypes
call ddc#custom#patch_filetype(['rs', 'toml', 'py'], 'sources', ['lsp', 'around', 'file', 'neosnippet', 'copilot'])
call ddc#custom#patch_filetype('markdown', 'sourceParams', #{
\   around: #{
\     maxSize: 100,
\   },
\ })


" Mappings
" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? pum#map#insert_relative(+1) :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

inoremap <silent><expr> <S-TAB>
\ pumvisible() ? pum#map#insert_relative(-1) : '<C-n>'
  " <S-TAB>: completion back.
  inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-n>'
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''
lua_add = '''
  vim.opt.completeopt = "menu,menuone,noselect"
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
rev = 'master'
on_event = 'InsertEnter'
depends = ['neosnippet-snippets']
hook_source = '''
  imap <C-k>     <Plug>(neosnippet_expand_or_jump)
  smap <C-k>     <Plug>(neosnippet_expand_or_jump)
  xmap <C-k>     <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#enable_snipmate_compatibility = 1

  let g:neosnippet#snippets_directory = '~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
rev = 'master'
#-----------------------------------------------------------------------
# end of ddc settings
#-----------------------------------------------------------------------
