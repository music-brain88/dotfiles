# icons
[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'goolord/alpha-nvim'
hook_add = '''
lua << EOF
local alpha = require("alpha")
local function button(sc, txt, keybind)
  local sc_ = sc:gsub("%s", ""):gsub("SPC", "<leader>")
  local opts = {
    position = "center", text = txt,
    shortcut = sc,
    cursor = 5,
    width = 36,
    align_shortcut = "right",
    hl = "AlphaButtons",
  }

  if keybind then
    opts.keymap = { "n", sc_, keybind, { noremap = true, silent = true } }
  end

  return {
    type = "button",
    val = txt,
    on_press = function()
      local key = vim.api.nvim_replace_termcodes(sc_, true, false, true)
      vim.api.nvim_feedkeys(key, "normal", false)
    end,
    opts = opts,
  }
end

local col = function(strlist, opts)
  -- strlist is a TABLE of TABLES, representing columns of text
  -- opts is a text display option

  -- column spacing
  local padding = 6
  -- fill lines up to the maximim length with 'fillchar'
  local fillchar = " "
  -- columns padding char (for testing)
  local padchar = " "

  -- define maximum string length in a table
  local maxlen = function(str)
    local max = 0
    for i in pairs(str) do
      if #str[i] > max then
      max = #str[i]
    end
  end
  return max
end

-- add as much right-padding to align the text block
local pad = function(str, max)
  local strlist = {}
  for i in pairs(str) do
    if #str[i] < max then
      local newstr = str[i] .. string.rep(fillchar, max - #str[i])
      table.insert(strlist, newstr)
    else
      table.insert(strlist, str[i])
    end
  end
  return strlist
end

-- this is a table for text strings
local values = {}
-- process all the lines
for i = 1, maxlen(strlist) do
  local str = ""
  -- process all the columns but last, because we dont wand extra padding
  -- after last column
  for column = 1, #strlist - 1 do
    local maxstr = maxlen(strlist[column])
    local padded = pad(strlist[column], maxstr)
    if strlist[column][i] == nil then
      str = str .. string.rep(fillchar, maxstr) .. string.rep(padchar, padding)
    else
      str = str .. padded[i] .. string.rep(padchar, padding)
    end
  end

  -- lets process the last column, no extra padding
  do
    local maxstr = maxlen(strlist[#strlist])
    local padded = pad(strlist[#strlist], maxstr)
    if strlist[#strlist][i] == nil then
      str = str .. string.rep(fillchar, maxlen(strlist[#strlist]))
    else
      str = str .. padded[i]
    end
  end

  -- insert result into output table
  table.insert(values, { type = "text", val = str, opts = opts })
  end

  return values
end

-- DEFAULT THEME
local default = {}

default.ascii = {
"                  -`                   ",
"                 .o+`                  ",
"                `ooo/                  ",
"               `+oooo:                 ",
"              `+oooooo:                ",
"              -+oooooo+:               ",
"            `/:-:++oooo+:              ",
"           `/++++/+++++++:             ",
"          `/++++++++++++++:            ",
"         `/+++ooooooooooooo/`          ",
"        ./ooosssso++osssssso+`         ",
"       .oossssso-````/ossssss+`        ",
"      -osssssso.      :ssssssso.       ",
"     :osssssss/        osssso+++.      ",
"    /ossssssss/        +ssssooo/-      ",
"  `/ossssso+/:-        -:/+osssso+-    ",
" `+sso+:-`                 `.-/+oso:   ",
"`++:.                           `-/+/  ",
".`                                 `   ",
}

default.header = {
  type = "text",
  val = default.ascii,
  opts = {
    position = "center",
    hl = "type",
  },
}

-- key reference
local ddu = {
  "         Search        ",
  "",
  ",f  fuzzy find files",
  ",w  fuzzy find under cur",
  ",g  fuzzy find live grep",
  ",b  fuzzy find buffers",
}

local ddu_ff = {
  "     Search action     ",
  "",
  "<CR>     itemAction",
  "i        openFilterWindow",
  "<Space>  toggleSelectItem",
  "q        quit",
}

local tabuffers = {
  "      tabs      ",
  "",
  "tc     create tab",
  "tn     next tab",
  "tp     prev tab",
  "tx     Close tab",
}

local filer = {
  "              Filer        ",
  "",
  ",m     open filer (toggle)",
  "!      hidden file(toggle)",
  "?      List mappings/actions available",
  "m      move",
  "<F5>   Redraw",
  "<C-h>  Leave",
}


local lsp_nav1 = {
  "         LSP         ",
  "",
  "gd  goto definition",
  "gy  goto type-definition",
  "gi  goto implementation",
  "gr  goto references",
}

local buffers = {
  "    buffers     ",
  "",
  "<C-k>  buff next",
  "<C-j>  buff prev",
}

default.buttons = {
  type = "group",
  val = {
    button("e", "  new", ":ene <BAR> startinsert <CR>"),
    button("f", "  search file ", ":Ddu file_rec <CR>"),
    button("u", "  update", ":call dein#update()<CR>"),
    button("c", "  config", ":e ~/.config/nvim/init.lua <CR>"),
    button("q", "  quit", ":qa<CR>"),
  },
  position = "center",
}

default.block1 = {
  type = "group",
  val = col({ ddu, ddu_ff, tabuffers }, {
  position = "center",
  hl = {
    { "SpecialKey", 0, -1 },
    -- { "MoreMsg", 13, 20 },
    -- { "MoreMsg", 39, 47 },
    -- { "MoreMsg", 67, 74 },
    },
  }),
  opts = {
    spacing = 0,
  },
}

default.block2 = {
  type = "group",
  val = col({ filer, lsp_nav1, buffers }, {
  position = "center",
  hl = {
    { "SpecialKey", 0, -1 },
    -- { "MoreMsg", 12, 20 },
    -- { "MoreMsg", 43, 51 },
    -- { "MoreMsg", 67, 75 },
    },
  }),
  opts = {
    spacing = 0,
  },
}

-- load config
alpha.setup({
  layout = {
  { type = "padding", val = 1 },
  default.header,
  { type = "padding", val = 1 },
  default.buttons,
  { type = "padding", val = 1 },
  default.block1,
  { type = "padding", val = 1 },
  default.block2,
  { type = "padding", val = 20 },
  },
  opts = {},
})

-- autocmd
-- hide/unhide tabs when toggling Alpha
vim.cmd([[ autocmd User AlphaReady set showtabline=0 | autocmd BufUnload <buffer> set showtabline=2 ]])
EOF
'''


# Color scheme
[[plugins]]
repo = 'olimorris/onedarkpro.nvim'
hook_add = '''
lua << EOF
  local onedarkpro = require('onedarkpro')
  onedarkpro.setup({
  dark_theme = "onedark", -- The default dark theme
  colors = {}, -- Override default colors by specifying colors for 'onelight' or 'onedark' themes
  hlgroups = {}, -- Override default highlight groups
  filetype_hlgroups = {}, -- Override default highlight groups for specific filetypes
  plugins = { -- Override which plugins highlight groups are loaded
      native_lsp = true,
      polygot = false,
      treesitter = true,
      -- NOTE: Other plugins have been omitted for brevity
  },
  styles = {
      strings = "NONE", -- Style that is applied to strings
      comments = "NONE", -- Style that is applied to comments
      keywords = "NONE", -- Style that is applied to keywords
      functions = "NONE", -- Style that is applied to functions
      variables = "NONE", -- Style that is applied to variables
      virtual_text = "NONE", -- Style that is applied to virtual text
  },
  options = {
      bold = false, -- Use the themes opinionated bold styles?
      italic = false, -- Use the themes opinionated italic styles?
      underline = false, -- Use the themes opinionated underline styles?
      undercurl = false, -- Use the themes opinionated undercurl styles?
      cursorline = false, -- Use cursorline highlighting?
      transparency = false, -- Use a transparent background?
      terminal_colors = false, -- Use the theme's colors for Neovim's :terminal?
      window_unfocussed_color = false, -- When the window is out of focus, change the normal background?
  }
})
onedarkpro.load()
EOF
'''

# ステータスライン周り
[[plugins]]
repo = 'feline-nvim/feline.nvim'
hook_add = '''
lua << EOF
vim.cmd 'set termguicolors'
if not pcall(require, "feline") then
  return
end

-- onedark theme
local colors = {
    bg = "#282c34",
    fg = "#abb2bf",
    red = "#e06c75",
    orange = "#d19a66",
    yellow = "#e5c07b",
    green = "#98c379",
    cyan = "#56b6c2",
    blue = "#61afef",
    purple = "#c678dd",
    white = "#abb2bf",
    black = "#282c34",
    gray = "#5c6370",
    highlight = "#e2be7d",
    none = "NONE"
}

local vi_mode_colors = {
    NORMAL = colors.green,
    INSERT = colors.bule,
    VISUAL = colors.red,
    OP = colors.green,
    BLOCK = colors.blue,
    REPLACE = colors.purple,
    ['V-REPLACE'] = colors.purple,
    ENTER = colors.cyan,
    MORE = colors.cyan,
    SELECT = colors.orange,
    COMMAND = colors.green,
    SHELL = colors.green,
    TERM = colors.green,
    NONE = colors.yellow
}

local function file_osinfo()
    local os = vim.loop.os_uname().sysname
    local icon
    if os == 'Linux' then
        icon = ' ' 
    -- This elseif is not work
    -- vim.loop.os_uname().sysname return
    --  Linux or MAC
    elseif os == 'Arch' then
        icon = ''
    elseif os == 'MAC' then
        icon = ' '
    else
        icon = ' '
    end
    return icon .. os
end

local lsp = require 'feline.providers.lsp'

local vi_mode_utils = require 'feline.providers.vi_mode'

local lsp_get_diag = function(str)
  local count = vim.lsp.diagnostic.get_count(0, str)
  return (count > 0) and ' '..count..' ' or ''
end

-- LuaFormatter off

local comps = {
    vi_mode = {
        left = {
--            provider = function()
--              return '  ' .. vi_mode_utils.get_vim_mode()
--            end,
            provider = function()
              return ' ' .. vi_mode_utils.get_vim_mode() .. ' '
            end,
            hl = function()
                local val = {
                    name = vi_mode_utils.get_mode_highlight_name(),
                    bg = vi_mode_utils.get_mode_color(),
                    fg = colors.black
                }
                return val
            end,
            right_sep = {
              {
                str = '',
                hl = {
                  fg = colors.fg,
                },
              },
              'right_filled'
            },
            -- right_sep = ' ',
            legt_sep = ''
        },
        right = {
            -- provider = '' ,
            provider = '' ,
            hl = function()
                local val = {
                    name = vi_mode_utils.get_mode_highlight_name(),
                    fg = vi_mode_utils.get_mode_color()
                }
                return val
            end,
            -- left_sep = '  ',
            -- right_sep = '  '
            left_sep = '',
            right_sep = ''
        }
    },
    file = {
        info = {
            provider = {
              name = 'file_info',
              opts = {

                type = 'base-only',
                file_readonly_icon = '  ',
                -- file_readonly_icon = '  ',
                -- file_readonly_icon = '  ',
                -- file_readonly_icon = '  ',
                -- file_modified_icon = '',
                file_modified_icon = '',
                -- file_modified_icon = 'ﱐ',
                -- file_modified_icon = '',
                -- file_modified_icon = '',
                -- file_modified_icon = '',
              }
            },
            hl = {
                bg = colors.blue,
                fg = colors.black,
                style = 'bold'
            },
            left_sep = {
              {
                str = '',
                hl = {
                  bg = colors.fg,
                  fg = colors.fg,
                },
              },
              'left_filled'
            },
            right_sep = 'right_filled'
        },
        encoding = {
            provider = 'file_encoding',
            left_sep = ' ',
            hl = {
                fg = colors.purple,
                style = 'bold'
            }
        },
        type = {
            provider = 'file_type'
        },
        os = {
            provider = file_osinfo,
            left_sep = ' ',
            hl = {
                fg = colors.purple,
                style = 'bold'
            }
        },
        position = {
            provider = 'position',
            left_sep = ' ',
            hl = {
                fg = colors.cyan,
                -- style = 'bold'
            }
        },
    },
    left_end = {
        provider = function() return '' end,
        hl = {
            fg = colors.bg,
            bg = colors.blue,
        }
    },
    line_percentage = {
        provider = 'line_percentage',
        left_sep = ' ',
        hl = {
            style = 'bold'

        }
    },
    scroll_bar = {
        provider = 'scroll_bar',
        left_sep = ' ',
        hl = {
            fg = colors.blue,
            style = 'bold'
        }
    },
    diagnos = {
        err = {
            -- provider = 'diagnostic_errors',
            provider = function()
                return '' .. lsp_get_diag("ERROR")
            end,
            -- left_sep = ' ',
            enabled = function() return lsp.diagnostics_exist('ERROR') end,
            hl = {
                fg = colors.red
            }
        },
        warn = {
            -- provider = 'diagnostic_warnings',
            provider = function()
                return '' ..  lsp_get_diag("WARN")
            end,
            -- left_sep = ' ',
            enabled = function() return lsp.diagnostics_exist('WARN') end,
            hl = {
                fg = colors.yellow
            }
        },
        info = {
            -- provider = 'diagnostic_info',
            provider = function()
                return '' .. lsp_get_diag("INFO")
            end,
            -- left_sep = ' ',
            enabled = function() return lsp.diagnostics_exist('INFO') end,
            hl = {
                fg = colors.blue
            }
        },
        hint = {
            -- provider = 'diagnostic_hints',
            provider = function()
                return '' .. lsp_get_diag("HINT")
            end,
            -- left_sep = ' ',
            enabled = function() return lsp.diagnostics_exist('HINT') end,
            hl = {
                fg = colors.cyan
            }
        },
    },
    lsp = {
        name = {
            provider = 'lsp_client_names',
            -- left_sep = ' ',
            right_sep = ' ',
            -- icon = '  ',
            icon = '慎',
            hl = {
                fg = colors.yellow
            }
        }
    },
    git = {
        branch = {
            provider = 'git_branch',
            icon = ' ',
            -- icon = ' ',
            left_sep = ' ',
            hl = {
                fg = colors.purple,
                style = 'bold'
            },
        },
        add = {
            provider = 'git_diff_added',
            hl = {
                fg = colors.green
            }
        },
        change = {
            provider = 'git_diff_changed',
            hl = {
                fg = colors.orange
            }
        },
        remove = {
            provider = 'git_diff_removed',
            hl = {
                fg = colors.red
            }
        }
    }
}

local components = {
  active = {},
  inactive = {},
}

table.insert(components.active, {})
table.insert(components.active, {})
table.insert(components.active, {})

table.insert(components.inactive, {})
table.insert(components.inactive, {})
table.insert(components.inactive, {})

table.insert(components.active[1], comps.vi_mode.left)
table.insert(components.active[1], comps.file.info)
table.insert(components.active[1], comps.git.branch)
table.insert(components.active[3], comps.git.add)
table.insert(components.active[3], comps.git.change)
table.insert(components.active[3], comps.git.remove)
table.insert(components.inactive[1], comps.vi_mode.left)
table.insert(components.inactive[1], comps.file.info)
table.insert(components.active[3], comps.diagnos.err)
table.insert(components.active[3], comps.diagnos.warn)
table.insert(components.active[3], comps.diagnos.hint)
table.insert(components.active[3], comps.diagnos.info)
table.insert(components.active[3], comps.lsp.name)
table.insert(components.active[3], comps.file.os)
table.insert(components.active[3], comps.file.position)
table.insert(components.active[3], comps.line_percentage)
table.insert(components.active[3], comps.scroll_bar)
table.insert(components.active[3], comps.vi_mode.right)



-- TreeSitter
-- local ts_utils = require("nvim-treesitter.ts_utils")
-- local ts_parsers = require("nvim-treesitter.parsers")
-- local ts_queries = require("nvim-treesitter.query")
--[[ table.insert(components.active[2], {
  provider = function()
    local node = require("nvim-treesitter.ts_utils").get_node_at_cursor()
    return ("%d:%s [%d, %d] - [%d, %d]")
      :format(node:symbol(), node:type(), node:range())
  end,
  enabled = function()
    local ok, ts_parsers = pcall(require, "nvim-treesitter.parsers")
    return ok and ts_parsers.has_parser()
  end
}) ]]

-- require'feline'.setup {}
require'feline'.setup {
    colors = { bg = colors.bg, fg = colors.fg },
    components = components,
    vi_mode_colors = vi_mode_colors,
    force_inactive = {
        filetypes = {
            '^fern$',
            '^fugitive$',
            '^fugitiveblame$',
            '^help$'
        },
        buftypes = {
          'terminal'
        },
        bufnames = {}
    }
}
EOF
'''


[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
hook_add = '''
lua << EOF
vim.cmd 'set signcolumn=yes'
require('gitsigns').setup {
  signs = {
    add          = {hl = 'GitSignsAdd'   , text = '│', numhl='GitSignsAddNr'   , linehl='GitSignsAddLn'},
    change       = {hl = 'GitSignsChange', text = '│', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
    delete       = {hl = 'GitSignsDelete', text = '_', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    topdelete    = {hl = 'GitSignsDelete', text = '‾', numhl='GitSignsDeleteNr', linehl='GitSignsDeleteLn'},
    changedelete = {hl = 'GitSignsChange', text = '~', numhl='GitSignsChangeNr', linehl='GitSignsChangeLn'},
  },
  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`
  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`
  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`
  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`
  watch_gitdir = {
    interval = 1000,
    follow_files = true
  },
  attach_to_untracked = true,
  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`
  current_line_blame_opts = {
    virt_text = true,
    virt_text_pos = 'eol', -- 'eol' | 'overlay' | 'right_align'
    delay = 1000,
    ignore_whitespace = false,
  },
  current_line_blame_formatter = '<author>, <author_time:%Y-%m-%d> - <summary>',
  sign_priority = 6,
  update_debounce = 100,
  status_formatter = nil, -- Use default
  max_file_length = 40000,
  preview_config = {
    -- Options passed to nvim_open_win
    border = 'single',
    style = 'minimal',
    relative = 'cursor',
    row = 0,
    col = 1
  },
  yadm = {
    enable = false
  },
 on_attach = function(bufnr)
  local gs = package.loaded.gitsigns

  local function map(mode, l, r, opts)
    opts = opts or {}
    opts.buffer = bufnr
    vim.keymap.set(mode, l, r, opts)
  end

  -- Navigation
  map('n', ']c', function()
    if vim.wo.diff then return ']c' end
    vim.schedule(function() gs.next_hunk() end)
    return '<Ignore>'
  end, {expr=true})

  map('n', '[c', function()
    if vim.wo.diff then return '[c' end
    vim.schedule(function() gs.prev_hunk() end)
    return '<Ignore>'
  end, {expr=true})
   -- Actions
  map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
  map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
  map('n', '<leader>hS', gs.stage_buffer)
  map('n', '<leader>hu', gs.undo_stage_hunk)
  map('n', '<leader>hR', gs.reset_buffer)
  map('n', '<leader>hp', gs.preview_hunk)
  map('n', '<leader>hb', function() gs.blame_line{full=true} end)
  map('n', '<leader>tb', gs.toggle_current_line_blame)
  map('n', '<leader>hd', gs.diffthis)
  map('n', '<leader>hD', function() gs.diffthis('~') end)
  map('n', '<leader>td', gs.toggle_deleted)
  -- Text object
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
}
EOF
'''


[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
depends = ['feline.nvim']
# ステータスライン周り 
