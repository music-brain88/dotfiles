[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
"-----------------------------------------------------------------------
" Define denite mappings
"-----------------------------------------------------------------------
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> <bar>
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> -
  \ denite#do_map('do_action', 'split')
endfunction

let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7

" Change denite default options
call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })

noremap <silent> ,f :Denite file/rec<CR>
noremap <silent> ,t :Denite file/type<CR>
noremap <silent> ,g :Denite grep<CR>
noremap <silent> ,b :Denite buffer<CR>
noremap <silent> ,l :Denite line<CR>
'''


[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
nnoremap <silent>,m :<C-u>Defx -resume<CR>
nnoremap <silent>,v :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
call defx#custom#option('_', {
\ 'columns': 'indent:git:icons:filename',
\ 'show_ignored_files': 1,
\ })
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " open
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('open')
    " create new file
    nnoremap <silent><buffer><expr> n
    \ defx#do_action('new_file')
    " create new directory
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_directory')
    " open file oriental
    nnoremap <silent><buffer><expr> -
    \ defx#do_action('open', 'split')
    " open file vertical
    nnoremap <silent><buffer><expr> <bar>
    \ defx#do_action('open', 'vsplit')
    " delete file
    nnoremap <silent><buffer><expr> D
    \ defx#do_action('remove')
    " quit filer
    nnoremap <silent><buffer><expr> ,m
    \ defx#do_action('quit')
    " toggle hide ignored files
    nnoremap <silent><buffer><expr> <C-i>
    \ defx#do_action('toggle_ignored_files')
    " yank path
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    " go up directory
    nnoremap <silent><buffer><expr> ..
    \ defx#do_action('cd', ['..'])
    " change directory in vim path
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''

[[plugins]]
repo ="kristijanhusak/defx-git"
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '‚úπ',
  \ 'Staged'    : '‚úö',
  \ 'Untracked' : '‚ú≠',
  \ 'Renamed'   : '‚ûú',
  \ 'Unmerged'  : '‚ïê',
  \ 'Ignored'   : '‚òí',
  \ 'Deleted'   : '‚úñ',
  \ 'Unknown'   : '?'
  \ })
'''

[[plugins]]
repo = "kristijanhusak/defx-icons"

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# vim session save
[[plugins]]
repo = 'tpope/vim-obsession'
hook_add = '''  
  noremap <silent> <S-C-s> :mksession<CR>
'''

# indent setting
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree'] "„Ç§„É≥„Éá„É≥„ÉàÂèØË¶ñÂåñ„ÇíÁÑ°Âäπ„Éï„Ç°„Ç§„É´„ÇíÊåáÂÆö
  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
  let g:indent_guides_guide_size = 1
  let g:indent_guides_start_level = 2
  autocmd VimEnter * :IndentGuidesEnable
'''

# Ëá™ÂãïÊã¨ÂºßÈñâ„Åò
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  "call lexima#add_rule({'at': '\%#.*[-0-9a-zA-Z_,:]', 'char': '{', 'input': '{'})
  "call lexima#add_rule({'at': '\%#\n\s*}', 'char': '}', 'input': '}', 'delete': '}'})
'''


# ÁîªÈù¢ÂàÜÂâ≤Ê©üËÉΩÂº∑Âåñ
[[plugins]]
repo = 'simeji/winresizer'

# „Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥Âë®„Çä
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

hook_add = '''
  
  let g:airline_powerline_fonts = 1

  let g:airline#extensions#hunks#enabled=0
  let g:airline#extensions#branch#enabled=1
  "-----------------------------------------------------------------------
  "unicode symbols
  "-----------------------------------------------------------------------
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
 
  let g:airline_left_sep = '¬ª'
  let g:airline_left_sep = '‚ñ∂'
  let g:airline_right_sep = '¬´'
  let g:airline_right_sep = '‚óÄ'
  let g:airline_symbols.crypt = 'üîí'
  let g:airline_symbols.linenr = '‚ò∞'
  let g:airline_symbols.linenr = '‚êä'
  let g:airline_symbols.linenr = '‚ê§'
  let g:airline_symbols.linenr = '¬∂'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '„èë'
  let g:airline_symbols.branch = '‚éá'
  let g:airline_symbols.paste = 'œÅ'
  let g:airline_symbols.paste = '√û'
  let g:airline_symbols.paste = '‚à•'
  let g:airline_symbols.spell = 'Íû®'
  let g:airline_symbols.notexists = '‚àÑ'
  let g:airline_symbols.whitespace = 'Œû'

  " airline symbols
  let g:airline_left_sep = 'ÓÇ∞'
  let g:airline_left_alt_sep = 'ÓÇ±'
  let g:airline_right_sep = 'ÓÇ≤'
  let g:airline_right_alt_sep = 'ÓÇ≥'
  let g:airline_symbols.branch = 'ÓÇ†'
  let g:airline_symbols.readonly = 'ÓÇ¢'
  let g:airline_symbols.linenr = 'ÓÇ°'
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# „Çπ„ÉÜ„Éº„Çø„Çπ„É©„Ç§„É≥Âë®„Çä 

# linterÂÆüË°å„Éó„É©„Ç∞„Ç§„É≥
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  "-----------------------------------------------------------------------
  " Linter cuctom
  "-----------------------------------------------------------------------

  " „Ç®„É©„ÉºË°å„Å´Ë°®Á§∫„Åô„Çã„Éû„Éº„ÇØ
  let g:ale_sign_error = '‚®â'
  let g:ale_sign_warning = '‚ö†'
  " „Ç®„É©„ÉºË°å„Å´„Ç´„Éº„ÇΩ„É´„Çí„ÅÇ„Çè„Åõ„ÅüÈöõ„Å´Ë°®Á§∫„Åï„Çå„Çã„É°„ÉÉ„Çª„Éº„Ç∏„Éï„Ç©„Éº„Éû„ÉÉ„Éà
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " „Ç®„É©„ÉºË°®Á§∫„ÅÆÂàó„ÇíÂ∏∏ÊôÇË°®Á§∫
  let g:ale_sign_column_always = 1

  " „Éï„Ç°„Ç§„É´„ÇíÈñã„ÅÑ„Åü„Å®„Åç„Å´lintÂÆüË°å
  let g:ale_lint_on_enter = 1
  " „Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò„Åó„Åü„Å®„Åç„Å´lintÂÆüË°å
  let g:ale_lint_on_save = 1
  " Á∑®ÈõÜ‰∏≠„ÅÆlint„ÅØ„Åó„Å™„ÅÑ
  let g:ale_lint_on_text_changed = 'never'

  " lintÁµêÊûú„Çí„É≠„Ç±„Éº„Ç∑„Éß„É≥„É™„Çπ„Éà„Å®QuickFix„Å´„ÅØË°®Á§∫„Åó„Å™„ÅÑ
  " Âá∫„Å¶„Çã„Å®ÁµêÊßã„ÅÜ„Åñ„ÅÑ„ÅóQuickFix„ÇíÊõ∏„ÅçÊèõ„Åà„Çâ„Çå„Çã„ÅÆ„ÅØÂõ∞„Çã
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " ÊúâÂäπ„Å´„Åô„Çãlinter
  let g:ale_linters = {
  \   'python': ['flake8'],
  \}

  " ALEÁî®„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ
  nmap [ale] <Nop>
  map <C-k> [ale]
  " „Ç®„É©„ÉºË°å„Å´„Ç∏„É£„É≥„Éó
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)

'''
# Ëá™Âãïpep8Ê∫ñÊã†„ÅÆ„Ç§„É≥„Éá„É≥„Éà
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

# „Ç´„É©„Éº„Çπ„Ç≠„Éº„É†
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  if (empty($TMUX))
    if (has("nvim"))
      "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
    " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
    if (has("termguicolors"))
      set termguicolors
    endif
  endif
  let g:onedark_termcolors=256
  autocmd VimEnter * nested call SetHighlightOptions()

  augroup transparent-windows
    autocmd!
    autocmd FileType denite set winblend=10  " „Åì„Å°„Çâ„ÇÇ 5 „Äú 30 „ÅßË©¶„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    autocmd FileType denite-filter set winblend=10
  augroup END

  function! SetHighlightOptions()
    colorscheme onedark  "example
    "highlight Normal ctermbg=NONE guibg=NONE
    highlight NonText ctermbg=NONE guibg=NONE
    highlight LineNr ctermbg=NONE guibg=NONE
    highlight Folded ctermbg=NONE guibg=NONE
    highlight EndOfBuffer ctermbg=NONE guibg=NONE
  endfunction
'''

# toml syntax
[[plugins]] 
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Å´Âêà„Çè„Åõ„Å¶ft„ÇíÂàá„ÇäÊõø„Åà„Çã
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # „Ç´„Éº„ÇΩ„É´‰ΩçÁΩÆ„ÅÆ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÅÆft„ÇíÂà§ÂÆö„Åô„Çã„É©„Ç§„Éñ„É©„É™
repo = 'Shougo/context_filetype.vim'

# terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
nnoremap <silent> ,rc :TREPLSendFile<cr>
nnoremap <silent> ,rl :TREPLSendLine<cr>
vnoremap <silent> ,rl :TREPLSendSelection<cr>
nnoremap <silent> vt :Ttoggle<cr>
nnoremap <silent> vs :terminal<cr>
'''


# „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂë®„Çä
[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'vim-scripts/vim-javascript'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'gko/vim-coloresque'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'posva/vim-vue'
# „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÂë®„Çä

# gitÈñ¢ÈÄ£
[[plugins]]
repo = 'tpope/vim-fugitive'

# „Ç≥„É°„É≥„ÉàÊ©üËÉΩÂº∑Âåñ
[[plugins]]
repo = 'tyru/caw.vim'

hook_add = '''
  " Ë°å„ÅÆÊúÄÂàù„ÅÆÊñáÂ≠ó„ÅÆÂâç„Å´„Ç≥„É°„É≥„ÉàÊñáÂ≠ó„Çí„Éà„Ç∞„É´
  "nmap <C-S-/> (caw:hatpos:toggle)
  "vmap <C-S-/> (caw:hatpos:toggle)
  " Ë°åÈ†≠„Å´„Ç≥„É°„É≥„Éà„Çí„Éà„Ç∞„É´
  "nmap <C-S-/> (caw:zeropos:toggle)
  "vmap <C-S-/> (caw:zeropos:toggle)

'''
