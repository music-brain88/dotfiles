[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
 repo = 'Shougo/pum.vim'

#-----------------------------------------------------------------------
# fern settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
let g:fern#renderer = 'nerdfont'
nnoremap <silent>,m :<C-u>Fern . -reveal=% -drawer -toggle<CR>
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

### Coloring icon glyph
[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'
hook_add = '''
augroup my-glyph-palette
  autocmd! *
  autocmd FileType fern call glyph_palette#apply()
  autocmd FileType nerdtree,startify call glyph_palette#apply()
augroup END
'''
#-----------------------------------------------------------------------
# end of fern settings
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# ddu settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/ddu.vim'
hook_add = '''

" fuzzy find filename
nmap <silent> ,f <Cmd>call ddu#start({ 'name' : 'file' })<CR>

" fuzzy find full text search
nmap <silent> ,g <Cmd>call ddu#start({
\   'name': 'text',
\   'volatile': v:true,
\   'sources': [{
\     'name': 'rg',
\     'options': {'matchers': []},
\   }],
\   'uiParams': {'ff': {
\     'ignoreEmpty': v:false,
\     'autoResize': v:false,
\   }},
\ })<CR>


" fuzzy find buffer
nmap <silent> ,b <Cmd>call ddu#start({ 'name' : 'buffer' })<CR>

" fuzzy find grep cursor word
nmap <silent> ,w <Cmd>call ddu#start({
\   'name': 'word',
\   'sources':[
\     {'name': 'rg', 'params': { 'input': expand('<cword>')}}
\   ],
\ })<CR>

" ddu Global Setting
call ddu#custom#patch_global({
\   'ui': 'ff',
\   'sourceOptions': {
\     '_': {
\       'matchers': ['matcher_substring'],
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   },
\   'uiParams': {
\     'ff': {
\     'prompt': '> ',
\     'split': 'floating',
\   },
\  },
\ })

" fuzzy find filename setting
call ddu#custom#patch_local('file', {
\   'sources': [{'name': 'file_rec', 'params': {}}],
\ })

" fuzzy find full text search setting
call ddu#custom#patch_local('text', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never', '--sort-files', '--hidden'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" fuzzy find buffer
call ddu#custom#patch_local('buffer', {
\   'sources': [{'name': 'buffer', 'params': {}}],
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" fuzzy find grep cursor word setting
call ddu#custom#patch_local('word', {
\   'sourceParams' : {
\     'rg' : {
\       'args': ['--column', '--no-heading', '--color', 'never'],
\     },
\   },
\   'uiParams': {
\     'ff': {
\       'startFilter': v:true,
\     }
\   },
\ })

" from ddu document
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

" from ddu document
autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'

[[plugins]]
repo = 'shun/ddu-source-rg'

[[plugins]]
repo = 'shun/ddu-source-buffer'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'

[[plugins]]
repo = 'Shougo/ddu-kind-file'

#-----------------------------------------------------------------------
# end of ddu settings
#-----------------------------------------------------------------------

[[plugins]]
repo = 'wakatime/vim-wakatime'
hook_add = '''
if has('nvim') && isdirectory( $PYENV_ROOT.'/versions/neovim3' )
  let g:wakatime_PythonBinary = $PYENV_ROOT.'/versions/neovim3/bin/python'
endif
'''

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# merge = 0
# rev = 'release'
# hook_add = '''
# 
# " Always show the signcolumn, otherwise it would shift the text each time
# " diagnostics appear/become resolved.
# set signcolumn=yes
# 
# " Use tab for trigger completion with characters ahead and navigate.
# " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
# " other plugin before putting this into your config.
# inoremap <silent><expr> <TAB>
#       \ pumvisible() ? "\<C-n>" :
#       \ <SID>check_back_space() ? "\<TAB>" :
#       \ coc#refresh()
# inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
# 
# function! s:check_back_space() abort
#   let col = col('.') - 1
#   return !col || getline('.')[col - 1]  =~# '\s'
# endfunction
# 
# " Use <c-space> to trigger completion.
# inoremap <silent><expr> <c-space> coc#refresh()
# 
# " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
# " position. Coc only does snippet and additional edit on confirm.
# if has('patch8.1.1068')
#   " Use `complete_info` if your (Neo)Vim version supports it.
#   inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
# else
#   imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
# endif
# 
# " Use `[g` and `]g` to navigate diagnostics
# nmap <silent> [g <Plug>(coc-diagnostic-prev)
# nmap <silent> ]g <Plug>(coc-diagnostic-next)
# 
# " GoTo code navigation.
# nmap <silent> gd <Plug>(coc-definition)
# nmap <silent> gy <Plug>(coc-type-definition)
# nmap <silent> gi <Plug>(coc-implementation)
# nmap <silent> gr <Plug>(coc-references)
# 
# " Use K to show documentation in preview window.
# nnoremap <silent> K :call <SID>show_documentation()<CR>
# 
# function! s:show_documentation()
#   if (index(['vim','help'], &filetype) >= 0)
#     execute 'h '.expand('<cword>')
#   else
#     call CocAction('doHover')
#   endif
# endfunction
# 
# " Highlight the symbol and its references when holding the cursor.
# autocmd CursorHold * silent call CocActionAsync('highlight')
# 
# " Symbol renaming.
# nmap <leader>rn <Plug>(coc-rename)
# 
# " Formatting selected code.
# xmap <leader>f  <Plug>(coc-format-selected)
# nmap <leader>f  <Plug>(coc-format-selected)
# 
# augroup mygroup
#   autocmd!
#   " Setup formatexpr specified filetype(s).
#   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
#   " Update signature help on jump placeholder.
#   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
# augroup end
# 
# " Applying codeAction to the selected region.
# " Example: `<leader>aap` for current paragraph
# xmap <leader>a  <Plug>(coc-codeaction-selected)
# nmap <leader>a  <Plug>(coc-codeaction-selected)
# 
# " Remap keys for applying codeAction to the current line.
# nmap <leader>ac  <Plug>(coc-codeaction)
# " Apply AutoFix to problem on the current line.
# nmap <leader>qf  <Plug>(coc-fix-current)
# 
# " Introduce function text object
# " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
# xmap if <Plug>(coc-funcobj-i)
# xmap af <Plug>(coc-funcobj-a)
# omap if <Plug>(coc-funcobj-i)
# omap af <Plug>(coc-funcobj-a)
# 
# " Use <TAB> for selections ranges.
# " NOTE: Requires 'textDocument/selectionRange' support from the language server.
# " coc-tsserver, coc-python are the examples of servers that support it.
# " nmap <silent> <TAB> <Plug>(coc-range-select)
# " xmap <silent> <TAB> <Plug>(coc-range-select)
# 
# " Add `:Format` command to format current buffer.
# command! -nargs=0 Format :call CocAction('format')
# 
# " Add `:Fold` command to fold current buffer.
# command! -nargs=? Fold :call     CocAction('fold', <f-args>)
# 
# " Add `:OR` command for organize imports of the current buffer.
# command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')
# 
# " Add (Neo)Vim's native statusline support.
# " NOTE: Please see `:h coc-status` for integrations with external plugins that
# " provide custom statusline: lightline.vim, vim-airline.
# set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
# 
# " Mappings using CoCList:
# " Show all diagnostics.
# nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
# " Manage extensions.
# nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
# " Show commands.
# nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
# " Find symbol of current document.
# nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
# " Search workspace symbols.
# nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
# " Do default action for next item.
# nnoremap <silent> <space>j  :<C-u>CocNext<CR>
# " Do default action for previous item.
# nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
# " Resume latest coc list.
# nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
# '''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# vim session save
[[plugins]]
repo = 'tpope/vim-obsession'
hook_add = '''  
  noremap <silent> <S-C-s> :mksession<CR>
'''

# indent setting
# [[plugins]]
# repo = 'nathanaelkane/vim-indent-guides'
# hook_add = '''
#   let g:indent_guides_enable_on_vim_startup = 1
#   let g:indent_guides_exclude_filetypes = ['help', 'nerdtree'] "インデント可視化を無効ファイルを指定
#   let g:indentLine_color_term = 111
#   let g:indentLine_color_gui = '#708090'
#   let g:indent_guides_guide_size = 1
#   let g:indent_guides_start_level = 2
#   autocmd VimEnter * :IndentGuidesEnable
# '''

# 自動括弧閉じ
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  "call lexima#add_rule({'at': '\%#.*[-0-9a-zA-Z_,:]', 'char': '{', 'input': '{'})
  "call lexima#add_rule({'at': '\%#\n\s*}', 'char': '}', 'input': '}', 'delete': '}'})
'''


# 画面分割機能強化
[[plugins]]
repo = 'simeji/winresizer'

# ステータスライン周り
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

hook_add = '''
  
  let g:airline_powerline_fonts = 1

  let g:airline#extensions#hunks#enabled=0
  let g:airline#extensions#branch#enabled=1
  "-----------------------------------------------------------------------
  "unicode symbols
  "-----------------------------------------------------------------------
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
 
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.crypt = '🔒'
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '㏑'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.spell = 'Ꞩ'
  let g:airline_symbols.notexists = '∄'
  let g:airline_symbols.whitespace = 'Ξ'

  " airline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# ステータスライン周り 

# カラースキーム
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  if (empty($TMUX))
    if (has("nvim"))
      "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
    " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
    if (has("termguicolors"))
      set termguicolors
    endif
  endif
  let g:onedark_termcolors=256
  autocmd VimEnter * nested call SetHighlightOptions()

  augroup transparent-windows
    autocmd!
    autocmd FileType denite set winblend=10  " こちらも 5 〜 30 で試してみてください。
    autocmd FileType denite-filter set winblend=10
  augroup END

  function! SetHighlightOptions()
    colorscheme onedark  "example
    "highlight Normal ctermbg=NONE guibg=NONE
    highlight NonText ctermbg=NONE guibg=NONE
    highlight LineNr ctermbg=NONE guibg=NONE
    highlight Folded ctermbg=NONE guibg=NONE
    highlight EndOfBuffer ctermbg=NONE guibg=NONE
  endfunction
'''

# toml syntax
[[plugins]] 
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

# terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
nnoremap <silent> ,rc :TREPLSendFile<cr>
nnoremap <silent> ,rl :TREPLSendLine<cr>
vnoremap <silent> ,rl :TREPLSendSelection<cr>
nnoremap <silent> vt :Ttoggle<cr>
nnoremap <silent> vs :terminal<cr>
'''


# フロントエンド周り
[[plugins]]
repo = 'gko/vim-coloresque'
# フロントエンド周り

# git関連
[[plugins]]
repo = 'tpope/vim-fugitive'

# コメント機能強化
[[plugins]]
repo = 'tyru/caw.vim'

hook_add = '''
  " 行の最初の文字の前にコメント文字をトグル
  "nmap <C-S-/> (caw:hatpos:toggle)
  "vmap <C-S-/> (caw:hatpos:toggle)
  " 行頭にコメントをトグル
  "nmap <C-S-/> (caw:zeropos:toggle)
  "vmap <C-S-/> (caw:zeropos:toggle)

'''

[[plugins]]
repo = 'kat0h/bufpreview.vim'

[[plugins]]
repo = 'vim-denops/denops-helloworld.vim'
