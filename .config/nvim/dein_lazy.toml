#-----------------------------------------------------------------------
# ddc settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_add = '''
inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''
hook_source = '''
  call ddc#custom#patch_global('sources', ['nvim-lsp' ,'around', 'file'])
  call ddc#custom#patch_global('sourceOptions', {
        \ '_': {
        \   'matchers': ['matcher_head'],
        \   'sorters': ['sorter_rank']
        \ },
        \ 'around': {
        \   'mark': 'around'
        \  },
        \ 'nvim-lsp': {
        \   'mark': 'lsp',
        \   'forceCompletionPattern': '\.\w*|:\w*|->\w*'
        \  },
        \ 'file': {
        \   'mark': 'file',
        \   'isVolatile': v:true,
        \   'forceCompletionPattern': '\S/\S*'
        \  },
        \ })
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'


[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufEnter'
hook_source= '''
lua << EOF
local lsp_installer = require("nvim-lsp-installer")
lsp_installer.on_server_ready(function(server)
  local opts = {
    automatic_installation = true,
    ui = {
       icons = {
         server_installed = "✓",
         server_pending = "➜",
          server_uninstalled = "✗"
       }
    }
  }
  server:setup(opts)
end)
EOF
'''

[[plugins]]
repo = 'williamboman/nvim-lsp-installer'
on_source = 'nvim-lspconfig'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
#-----------------------------------------------------------------------
# end of ddc settings
#-----------------------------------------------------------------------

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']


[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_log_file = expand('~/asyncomplete.log')
let g:asyncomplete_auto_popup = 1
imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

# 非同期
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
merged = 0

[[plugins]]
repo = 'thinca/vim-quickrun'
