#-----------------------------------------------------------------------
# ddc settings
#-----------------------------------------------------------------------
[[plugins]]
repo = 'Shougo/ddc-ui-native'

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim', 'pum.vim', 'ddc-ui-native']
hook_add = '''
inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''
hook_source = '''
  call ddc#custom#patch_global('ui', 'native')
  call ddc#custom#patch_global('sources', ['nvim-lsp' ,'around', 'file'])
  call ddc#custom#patch_global('sourceOptions', #{
        \   _:#{
        \   matchers: ['matcher_head'],
        \   sorters: ['sorter_rank']
        \ },
        \   around:#{
        \   mark: 'around'
        \  },
        \   nvim-lsp:#{
        \   mark: 'lsp',
        \   forceCompletionPattern: '\.\w*|:\w*|->\w*'
        \  },
        \   file: #{
        \   mark: 'file',
        \   isVolatile: v:true,
        \   forceCompletionPattern: '\S/\S*'
        \  },
        \ })
  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
  call popup_preview#enable()
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
  call signature_help#enable()
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
  imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  let g:vsnip_filetypes = {}
lua << EOF
  vim.opt.completeopt = "menu,menuone,noselect"
EOF
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'
#-----------------------------------------------------------------------
# end of ddc settings
#-----------------------------------------------------------------------

[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['md', 'markdown']


[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_log_file = expand('~/asyncomplete.log')
let g:asyncomplete_auto_popup = 1
imap <c-space> <Plug>(asyncomplete_force_refresh)
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<cr>"
'''

# 非同期
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'
merged = 0

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'kat0h/bufpreview.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
on_event = 'BufReadPost'
hook_source = '''
lua << EOF
  require'nvim-treesitter.configs'.setup {
    ensure_installed = {
      "lua",
      "rust",
      "python",
      "fish",
      "bash",
      "typescript",
      "json",
      "go",
      "dockerfile",
      "html",
      "markdown",
      "toml",
      "make",
      "yaml",
    },

    sync_install = false,

    ignore_install = { "javascript" },

    highlight = {
      enable = true,
      disable = {
        "lua",
        "rust",
        "vue",
        "toml",
    },

    additional_vim_regex_highlighting = false,
    },
    indent = {
      enable = true,
    },
  }
EOF
'''
