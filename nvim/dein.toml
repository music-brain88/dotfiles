[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
"-----------------------------------------------------------------------
" Define denite mappings
"-----------------------------------------------------------------------
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> <bar>
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> -
  \ denite#do_map('do_action', 'split')
endfunction

let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7

" Change denite default options
call denite#custom#option('default', {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ })

noremap <silent> ,f :Denite file/rec<CR>
noremap <silent> ,t :Denite file/type<CR>
noremap <silent> ,g :Denite grep<CR>
noremap <silent> ,b :Denite buffer<CR>
noremap <silent> ,l :Denite line<CR>
'''


[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nnoremap <silent><C-n> :<C-u>Defx<CR>
call defx#custom#option('_', {
\ 'columns': 'indent:git:icons:filename',
\ 'show_ignored_files': 1,
\ })
autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " open
    nnoremap <silent><buffer><expr> <CR>
    \ defx#do_action('open')
    " open file oriental
    nnoremap <silent><buffer><expr> -
    \ defx#do_action('open', 'split')
    " open file vertical
    nnoremap <silent><buffer><expr> <bar>
    \ defx#do_action('open', 'vsplit')
    " quit filer
    nnoremap <silent><buffer><expr> <C-n>
    \ defx#do_action('quit')
    " toggle hide ignored files
    nnoremap <silent><buffer><expr> <C-i>
    \ defx#do_action('toggle_ignored_files')
    " yank path
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    " go up directory
    nnoremap <silent><buffer><expr> ..
    \ defx#do_action('cd', ['..'])
    " change directory in vim path
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# vim session save
[[plugins]]
repo = 'tpope/vim-obsession'
hook_add = '''  
  noremap <silent> <S-C-s> :mksession<CR>
'''

# indent setting
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_exclude_filetypes = ['help', 'nerdtree'] "インデント可視化を無効ファイルを指定
  let g:indentLine_color_term = 111
  let g:indentLine_color_gui = '#708090'
  let g:indent_guides_guide_size = 1
  let g:indent_guides_start_level = 2
  autocmd VimEnter * :IndentGuidesEnable
'''

# 自動括弧閉じ
[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  "call lexima#add_rule({'at': '\%#.*[-0-9a-zA-Z_,:]', 'char': '{', 'input': '{'})
  "call lexima#add_rule({'at': '\%#\n\s*}', 'char': '}', 'input': '}', 'delete': '}'})
'''


# 画面分割機能強化
[[plugins]]
repo = 'simeji/winresizer'

# ステータスライン周り
[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']

hook_add = '''
  
  let g:airline_powerline_fonts = 1

  let g:airline#extensions#hunks#enabled=0
  let g:airline#extensions#branch#enabled=1
  "-----------------------------------------------------------------------
  "unicode symbols
  "-----------------------------------------------------------------------
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif
 
  let g:airline_left_sep = '»'
  let g:airline_left_sep = '▶'
  let g:airline_right_sep = '«'
  let g:airline_right_sep = '◀'
  let g:airline_symbols.crypt = '🔒'
  let g:airline_symbols.linenr = '☰'
  let g:airline_symbols.linenr = '␊'
  let g:airline_symbols.linenr = '␤'
  let g:airline_symbols.linenr = '¶'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '㏑'
  let g:airline_symbols.branch = '⎇'
  let g:airline_symbols.paste = 'ρ'
  let g:airline_symbols.paste = 'Þ'
  let g:airline_symbols.paste = '∥'
  let g:airline_symbols.spell = 'Ꞩ'
  let g:airline_symbols.notexists = '∄'
  let g:airline_symbols.whitespace = 'Ξ'

  " airline symbols
  let g:airline_left_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_sep = ''
  let g:airline_right_alt_sep = ''
  let g:airline_symbols.branch = ''
  let g:airline_symbols.readonly = ''
  let g:airline_symbols.linenr = ''
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# ステータスライン周り 

# アイコン
[[plugins]]
repo = 'ryanoasis/nerd-fonts'

# linter実行プラグイン
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  "-----------------------------------------------------------------------
  " Linter cuctom
  "-----------------------------------------------------------------------

  " エラー行に表示するマーク
  let g:ale_sign_error = '⨉'
  let g:ale_sign_warning = '⚠'
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1

  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'

  " lint結果をロケーションリストとQuickFixには表示しない
  " 出てると結構うざいしQuickFixを書き換えられるのは困る
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0

  " 有効にするlinter
  let g:ale_linters = {
  \   'python': ['flake8'],
  \}

  " ALE用プレフィックス
  nmap [ale] <Nop>
  map <C-k> [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]<C-P> <Plug>(ale_previous)
  nmap <silent> [ale]<C-N> <Plug>(ale_next)

'''
# 自動pep8準拠のインデント
[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'

# カラースキーム
[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
  if (empty($TMUX))
    if (has("nvim"))
      "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
      let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
    "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
    " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
    if (has("termguicolors"))
      set termguicolors
    endif
  endif
  let g:onedark_termcolors=256
  autocmd VimEnter * nested call SetHighlightOptions()

  augroup transparent-windows
    autocmd!
    autocmd FileType denite set winblend=10  " こちらも 5 〜 30 で試してみてください。
    autocmd FileType denite-filter set winblend=10
  augroup END

  function! SetHighlightOptions()
    colorscheme onedark  "example
    "highlight Normal ctermbg=NONE guibg=NONE
    highlight NonText ctermbg=NONE guibg=NONE
    highlight LineNr ctermbg=NONE guibg=NONE
    highlight Folded ctermbg=NONE guibg=NONE
    highlight EndOfBuffer ctermbg=NONE guibg=NONE
  endfunction
'''

# toml syntax
[[plugins]] 
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

# terminal plugin
[[plugins]]
repo = 'kassio/neoterm'
if = "has('nvim')"
hook_add = '''
nnoremap <silent> ,rc :TREPLSendFile<cr>
nnoremap <silent> ,rl :TREPLSendLine<cr>
vnoremap <silent> ,rl :TREPLSendSelection<cr>
nnoremap <silent> vt :Ttoggle<cr>
nnoremap <silent> vs :terminal<cr>
'''


# フロントエンド周り
[[plugins]]
repo = 'hail2u/vim-css3-syntax'

[[plugins]]
repo = 'vim-scripts/vim-javascript'

[[plugins]]
repo = 'othree/html5.vim'

[[plugins]]
repo = 'gko/vim-coloresque'

[[plugins]]
repo = 'cakebaker/scss-syntax.vim'

[[plugins]]
repo = 'posva/vim-vue'
# フロントエンド周り

# git関連
[[plugins]]
repo = 'tpope/vim-fugitive'

# コメント機能強化
[[plugins]]
repo = 'tyru/caw.vim'

hook_add = '''
  " 行の最初の文字の前にコメント文字をトグル
  "nmap <C-S-/> (caw:hatpos:toggle)
  "vmap <C-S-/> (caw:hatpos:toggle)
  " 行頭にコメントをトグル
  "nmap <C-S-/> (caw:zeropos:toggle)
  "vmap <C-S-/> (caw:zeropos:toggle)

'''
